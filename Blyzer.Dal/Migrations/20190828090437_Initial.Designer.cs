// <auto-generated />
using System;
using Blyzer.Dal.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Blyzer.Dal.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20190828090437_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:hstore", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Blyzer.Domain.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnName("caption")
                        .HasAnnotation("Npgsql:Comment", "Опис ролі");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasAnnotation("Npgsql:Comment", "Користувач системи, що створив запис");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasAnnotation("Npgsql:Comment", "Дата та час внесення");

                    b.Property<bool>("IsAdministrator")
                        .HasColumnName("is_administrator")
                        .HasAnnotation("Npgsql:Comment", "Адміністратор?");

                    b.Property<bool>("IsDefault")
                        .HasColumnName("is_default")
                        .HasAnnotation("Npgsql:Comment", "За замовчуванням");

                    b.Property<bool>("IsManager")
                        .HasColumnName("is_manager")
                        .HasAnnotation("Npgsql:Comment", "Менеджер?");

                    b.Property<bool>("IsSuperUser")
                        .HasColumnName("is_super_user")
                        .HasAnnotation("Npgsql:Comment", "Суперюзер?");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnName("normalized_name")
                        .HasMaxLength(256);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Npgsql:Comment", "Користувач системи, що модифікував запис");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasAnnotation("Npgsql:Comment", "Дата та час редагування");

                    b.HasKey("Id")
                        .HasName("pk_app_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("role_name_index");

                    b.ToTable("app_roles");
                });

            modelBuilder.Entity("Blyzer.Domain.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp");

                    b.Property<Guid?>("CountryId")
                        .HasColumnName("country_id")
                        .HasAnnotation("Npgsql:Comment", "Національність");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasAnnotation("Npgsql:Comment", "Користувач системи, що створив запис");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasAnnotation("Npgsql:Comment", "Дата та час внесення");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnName("date_of_birth")
                        .HasAnnotation("Npgsql:Comment", "Дата народження");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasMaxLength(50)
                        .HasAnnotation("Npgsql:Comment", "Ім'я");

                    b.Property<int>("Gender")
                        .HasColumnName("gender")
                        .HasAnnotation("Npgsql:Comment", "Стать");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasMaxLength(50)
                        .HasAnnotation("Npgsql:Comment", "Прізвище");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnName("normalized_email")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnName("normalized_user_name")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<Guid?>("PlayerId")
                        .HasColumnName("player_id")
                        .HasAnnotation("Npgsql:Comment", "Ідентифікатор гравця");

                    b.Property<string>("SecurityStamp")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnName("two_factor_enabled");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Npgsql:Comment", "Користувач системи, що модифікував запис");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasAnnotation("Npgsql:Comment", "Дата та час редагування");

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("pk_app_users");

                    b.HasIndex("CountryId")
                        .HasName("ix_app_users_country_id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("email_index");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("user_name_index");

                    b.HasIndex("UserName")
                        .HasName("ix_app_users_user_name");

                    b.ToTable("app_users");
                });

            modelBuilder.Entity("Blyzer.Domain.Entities.Ball", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:Comment", "Ідентифікатор");

                    b.Property<float>("CoordinateX")
                        .HasColumnName("coordinate_x")
                        .HasAnnotation("Npgsql:Comment", "Координата X");

                    b.Property<float>("CoordinateY")
                        .HasColumnName("coordinate_y")
                        .HasAnnotation("Npgsql:Comment", "Координата Y");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasAnnotation("Npgsql:Comment", "Користувач системи, що створив запис");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasAnnotation("Npgsql:Comment", "Дата та час внесення");

                    b.Property<int>("DeadBallType")
                        .HasColumnName("dead_ball_type")
                        .HasAnnotation("Npgsql:Comment", "Типи м'ячів поза грою");

                    b.Property<float>("Distance")
                        .HasColumnName("distance")
                        .HasAnnotation("Npgsql:Comment", "Дистанція");

                    b.Property<Guid>("EndId")
                        .HasColumnName("end_id")
                        .HasAnnotation("Npgsql:Comment", "Період гри");

                    b.Property<int>("FromBox")
                        .HasColumnName("from_box")
                        .HasAnnotation("Npgsql:Comment", "Ігрова зона");

                    b.Property<int>("Index")
                        .HasColumnName("index");

                    b.Property<bool>("IsDeadBall")
                        .HasColumnName("is_dead_ball")
                        .HasAnnotation("Npgsql:Comment", "М'яч поза грою?");

                    b.Property<bool>("IsJack")
                        .HasColumnName("is_jack");

                    b.Property<bool>("IsPenalty")
                        .HasColumnName("is_penalty")
                        .HasAnnotation("Npgsql:Comment", "Штрафний м'яч?");

                    b.Property<bool>("IsPublic")
                        .HasColumnName("is_public");

                    b.Property<Guid>("PlayerId")
                        .HasColumnName("player_id")
                        .HasAnnotation("Npgsql:Comment", "Гравець");

                    b.Property<int>("Rating")
                        .HasColumnName("rating")
                        .HasAnnotation("Npgsql:Comment", "Оцінка");

                    b.Property<int>("ShotType")
                        .HasColumnName("shot_type")
                        .HasAnnotation("Npgsql:Comment", "Тип кидка");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Npgsql:Comment", "Користувач системи, що модифікував запис");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasAnnotation("Npgsql:Comment", "Дата та час редагування");

                    b.HasKey("Id")
                        .HasName("pk_balls");

                    b.HasIndex("EndId")
                        .HasName("ix_balls_end_id");

                    b.HasIndex("PlayerId")
                        .HasName("ix_balls_player_id");

                    b.ToTable("balls");

                    b.HasAnnotation("Npgsql:Comment", "М'ячі");
                });

            modelBuilder.Entity("Blyzer.Domain.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:Comment", "Ідентифікатор");

                    b.Property<string>("Alpha2")
                        .HasColumnName("alpha2")
                        .HasAnnotation("Npgsql:Comment", "Alpha2");

                    b.Property<string>("Alpha3")
                        .HasColumnName("alpha3")
                        .HasAnnotation("Npgsql:Comment", "Alpha3");

                    b.Property<int>("Code")
                        .HasColumnName("code")
                        .HasAnnotation("Npgsql:Comment", "Код країни");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasAnnotation("Npgsql:Comment", "Користувач системи, що створив запис");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasAnnotation("Npgsql:Comment", "Дата та час внесення");

                    b.Property<bool>("IsPublic")
                        .HasColumnName("is_public");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasAnnotation("Npgsql:Comment", "Назва");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Npgsql:Comment", "Користувач системи, що модифікував запис");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasAnnotation("Npgsql:Comment", "Дата та час редагування");

                    b.HasKey("Id")
                        .HasName("pk_countries");

                    b.ToTable("countries");

                    b.HasAnnotation("Npgsql:Comment", "Країни");
                });

            modelBuilder.Entity("Blyzer.Domain.Entities.End", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:Comment", "Ідентифікатор");

                    b.Property<int>("AvgPointBlue")
                        .HasColumnName("avg_point_blue");

                    b.Property<int>("AvgPointRed")
                        .HasColumnName("avg_point_red");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasAnnotation("Npgsql:Comment", "Користувач системи, що створив запис");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasAnnotation("Npgsql:Comment", "Дата та час внесення");

                    b.Property<int>("Index")
                        .HasColumnName("index")
                        .HasAnnotation("Npgsql:Comment", "Порядковий номер у грі");

                    b.Property<bool>("IsDisrupted")
                        .HasColumnName("is_disrupted")
                        .HasAnnotation("Npgsql:Comment", "З порушенням?");

                    b.Property<bool>("IsPublic")
                        .HasColumnName("is_public");

                    b.Property<bool>("IsTieBreak")
                        .HasColumnName("is_tie_break")
                        .HasAnnotation("Npgsql:Comment", "Тай-брейк?");

                    b.Property<Guid>("MatchId")
                        .HasColumnName("match_id")
                        .HasAnnotation("Npgsql:Comment", "Ідентифікатор матчу");

                    b.Property<int>("ScoreBlue")
                        .HasColumnName("score_blue")
                        .HasAnnotation("Npgsql:Comment", "Рахунок синіх");

                    b.Property<int>("ScoreRed")
                        .HasColumnName("score_red")
                        .HasAnnotation("Npgsql:Comment", "Рахунок червоних");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Npgsql:Comment", "Користувач системи, що модифікував запис");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasAnnotation("Npgsql:Comment", "Дата та час редагування");

                    b.HasKey("Id")
                        .HasName("pk_ends");

                    b.HasIndex("MatchId")
                        .HasName("ix_ends_match_id");

                    b.ToTable("ends");

                    b.HasAnnotation("Npgsql:Comment", "Періоди гри");
                });

            modelBuilder.Entity("Blyzer.Domain.Entities.LinkToPlayer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("Bib")
                        .HasColumnName("bib")
                        .HasAnnotation("Npgsql:Comment", "BIB");

                    b.Property<int>("Box")
                        .HasColumnName("box")
                        .HasAnnotation("Npgsql:Comment", "Номер боксу");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasAnnotation("Npgsql:Comment", "Користувач системи, що створив запис");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasAnnotation("Npgsql:Comment", "Дата та час внесення");

                    b.Property<int>("Discriminator")
                        .HasColumnName("discriminator");

                    b.Property<bool>("IsPublic")
                        .HasColumnName("is_public");

                    b.Property<Guid>("PlayerId")
                        .HasColumnName("player_id")
                        .HasAnnotation("Npgsql:Comment", "Гравець");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Npgsql:Comment", "Користувач системи, що модифікував запис");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasAnnotation("Npgsql:Comment", "Дата та час редагування");

                    b.HasKey("Id")
                        .HasName("pk_link_to_player");

                    b.ToTable("link_to_player");

                    b.HasDiscriminator<int>("Discriminator");
                });

            modelBuilder.Entity("Blyzer.Domain.Entities.Match", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:Comment", "Ідентифікатор");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnName("app_user_id");

                    b.Property<int>("AvgPointBlue")
                        .HasColumnName("avg_point_blue");

                    b.Property<int>("AvgPointRed")
                        .HasColumnName("avg_point_red");

                    b.Property<int>("CompetitionEvent")
                        .HasColumnName("competition_event")
                        .HasAnnotation("Npgsql:Comment", "Competition Event");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasAnnotation("Npgsql:Comment", "Користувач системи, що створив запис");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasAnnotation("Npgsql:Comment", "Дата та час внесення");

                    b.Property<DateTime>("DateTimeStamp")
                        .HasColumnName("date_time_stamp")
                        .HasAnnotation("Npgsql:Comment", "Дата та час проведення");

                    b.Property<int>("EliminationStage")
                        .HasColumnName("elimination_stage")
                        .HasAnnotation("Npgsql:Comment", "Етап на вибування");

                    b.Property<string>("FlagBlue")
                        .HasColumnName("flag_blue")
                        .HasAnnotation("Npgsql:Comment", "Ідентифікатор прапору для синіх");

                    b.Property<string>("FlagRed")
                        .HasColumnName("flag_red")
                        .HasAnnotation("Npgsql:Comment", "Ідентифікатор прапору для червоних");

                    b.Property<bool>("IsPublic")
                        .HasColumnName("is_public");

                    b.Property<int>("MatchType")
                        .HasColumnName("match_type")
                        .HasAnnotation("Npgsql:Comment", "Тип матчу");

                    b.Property<string>("PoolStage")
                        .HasColumnName("pool_stage")
                        .HasAnnotation("Npgsql:Comment", "Етап пулу");

                    b.Property<int>("Rate")
                        .HasColumnName("rate");

                    b.Property<int>("ScoreBlue")
                        .HasColumnName("score_blue")
                        .HasAnnotation("Npgsql:Comment", "Рахунок синіх");

                    b.Property<int>("ScoreRed")
                        .HasColumnName("score_red")
                        .HasAnnotation("Npgsql:Comment", "Рахунок червоних");

                    b.Property<Guid?>("TournamentId")
                        .HasColumnName("tournament_id")
                        .HasAnnotation("Npgsql:Comment", "Турнір");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Npgsql:Comment", "Користувач системи, що модифікував запис");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasAnnotation("Npgsql:Comment", "Дата та час редагування");

                    b.HasKey("Id")
                        .HasName("pk_matches");

                    b.HasIndex("AppUserId")
                        .HasName("ix_matches_app_user_id");

                    b.HasIndex("TournamentId")
                        .HasName("ix_matches_tournament_id");

                    b.ToTable("matches");

                    b.HasAnnotation("Npgsql:Comment", "Матчі");
                });

            modelBuilder.Entity("Blyzer.Domain.Entities.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:Comment", "Ідентифікатор");

                    b.Property<Guid?>("CountryId")
                        .HasColumnName("country_id")
                        .HasAnnotation("Npgsql:Comment", "Країна");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasAnnotation("Npgsql:Comment", "Користувач системи, що створив запис");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasAnnotation("Npgsql:Comment", "Дата та час внесення");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnName("full_name")
                        .HasAnnotation("Npgsql:Comment", "Ім'я та прізвище");

                    b.Property<bool>("IsBisFed")
                        .HasColumnName("is_bis_fed")
                        .HasAnnotation("Npgsql:Comment", "Чи є гравцем BISFed?");

                    b.Property<bool>("IsPublic")
                        .HasColumnName("is_public");

                    b.Property<int>("PlayerClassification")
                        .HasColumnName("player_classification")
                        .HasAnnotation("Npgsql:Comment", "Класифікація");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Npgsql:Comment", "Користувач системи, що модифікував запис");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasAnnotation("Npgsql:Comment", "Дата та час редагування");

                    b.HasKey("Id")
                        .HasName("pk_players");

                    b.ToTable("players");

                    b.HasAnnotation("Npgsql:Comment", "Гравці");
                });

            modelBuilder.Entity("Blyzer.Domain.Entities.Tournament", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:Comment", "Ідентифікатор");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnName("app_user_id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasAnnotation("Npgsql:Comment", "Користувач системи, що створив запис");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasAnnotation("Npgsql:Comment", "Дата та час внесення");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from")
                        .HasColumnType("Date")
                        .HasAnnotation("Npgsql:Comment", "Дата початку");

                    b.Property<DateTime>("DateTo")
                        .HasColumnName("date_to")
                        .HasColumnType("Date")
                        .HasAnnotation("Npgsql:Comment", "Дата завершення");

                    b.Property<bool>("IsPublic")
                        .HasColumnName("is_public");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasAnnotation("Npgsql:Comment", "Назва");

                    b.Property<Guid>("TournamentTypeId")
                        .HasColumnName("tournament_type_id")
                        .HasAnnotation("Npgsql:Comment", "Тип турниру");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Npgsql:Comment", "Користувач системи, що модифікував запис");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasAnnotation("Npgsql:Comment", "Дата та час редагування");

                    b.HasKey("Id")
                        .HasName("pk_tournaments");

                    b.HasIndex("AppUserId")
                        .HasName("ix_tournaments_app_user_id");

                    b.HasIndex("TournamentTypeId")
                        .HasName("ix_tournaments_tournament_type_id");

                    b.ToTable("tournaments");

                    b.HasAnnotation("Npgsql:Comment", "Турніри");
                });

            modelBuilder.Entity("Blyzer.Domain.Entities.TournamentType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:Comment", "Ідентифікатор");

                    b.Property<string>("Abbr")
                        .IsRequired()
                        .HasColumnName("abbr")
                        .HasAnnotation("Npgsql:Comment", "Абревіатура");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasAnnotation("Npgsql:Comment", "Користувач системи, що створив запис");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasAnnotation("Npgsql:Comment", "Дата та час внесення");

                    b.Property<string>("Icon")
                        .HasColumnName("icon")
                        .HasAnnotation("Npgsql:Comment", "Іконка");

                    b.Property<bool>("IsBisFed")
                        .HasColumnName("is_bis_fed")
                        .HasAnnotation("Npgsql:Comment", "Чи є офіційним турніром BISFed?");

                    b.Property<bool>("IsPublic")
                        .HasColumnName("is_public");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasAnnotation("Npgsql:Comment", "Назва");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Npgsql:Comment", "Користувач системи, що модифікував запис");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasAnnotation("Npgsql:Comment", "Дата та час редагування");

                    b.HasKey("Id")
                        .HasName("pk_tournament_types");

                    b.ToTable("tournament_types");

                    b.HasAnnotation("Npgsql:Comment", "Типи турнірів");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnName("discriminator");

                    b.Property<Guid>("RoleId")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.ToTable("asp_net_role_claims");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRoleClaim<Guid>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnName("discriminator");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.ToTable("asp_net_user_claims");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserClaim<Guid>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnName("provider_key");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnName("discriminator");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnName("provider_display_name");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.ToTable("asp_net_user_logins");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserLogin<Guid>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnName("role_id");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnName("discriminator");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.ToTable("asp_net_user_roles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<Guid>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnName("discriminator");

                    b.Property<string>("Value")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("asp_net_user_tokens");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserToken<Guid>");
                });

            modelBuilder.Entity("Microsoft.EntityFrameworkCore.AutoHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Changed")
                        .HasColumnName("changed");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<int>("Kind")
                        .HasColumnName("kind");

                    b.Property<string>("RowId")
                        .IsRequired()
                        .HasColumnName("row_id")
                        .HasMaxLength(50);

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnName("table_name")
                        .HasMaxLength(128);

                    b.HasKey("Id")
                        .HasName("pk_auto_history");

                    b.ToTable("auto_history");
                });

            modelBuilder.Entity("Blyzer.Domain.Entities.EndToPlayer", b =>
                {
                    b.HasBaseType("Blyzer.Domain.Entities.LinkToPlayer");

                    b.Property<Guid?>("EndId")
                        .HasColumnName("end_id")
                        .HasAnnotation("Npgsql:Comment", "Ідентифікатор періоду гри");

                    b.HasIndex("EndId")
                        .HasName("ix_link_to_player_end_id");

                    b.ToTable("link_to_player");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Blyzer.Domain.Entities.MatchToPlayer", b =>
                {
                    b.HasBaseType("Blyzer.Domain.Entities.LinkToPlayer");

                    b.Property<bool>("IsSubstitutePlayer")
                        .HasColumnName("is_substitute_player")
                        .HasAnnotation("Npgsql:Comment", "Гравець для заміни?");

                    b.Property<Guid?>("MatchId")
                        .HasColumnName("match_id")
                        .HasAnnotation("Npgsql:Comment", "Ідентифікатор матчу");

                    b.HasIndex("MatchId")
                        .HasName("ix_link_to_player_match_id");

                    b.HasIndex("PlayerId")
                        .HasName("ix_link_to_player_player_id");

                    b.ToTable("link_to_player");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Blyzer.Domain.Entities.AppRoleClaim", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>");

                    b.HasIndex("RoleId")
                        .HasName("ix_asp_net_role_claims_role_id");

                    b.ToTable("asp_net_role_claims");

                    b.HasDiscriminator().HasValue("AppRoleClaim");
                });

            modelBuilder.Entity("Blyzer.Domain.Entities.AppUserClaim", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>");

                    b.HasIndex("UserId")
                        .HasName("ix_asp_net_user_claims_user_id");

                    b.ToTable("asp_net_user_claims");

                    b.HasDiscriminator().HasValue("AppUserClaim");
                });

            modelBuilder.Entity("Blyzer.Domain.Entities.AppUserLogin", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>");

                    b.HasIndex("UserId")
                        .HasName("ix_asp_net_user_logins_user_id");

                    b.ToTable("asp_net_user_logins");

                    b.HasDiscriminator().HasValue("AppUserLogin");
                });

            modelBuilder.Entity("Blyzer.Domain.Entities.AppUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>");

                    b.HasIndex("RoleId")
                        .HasName("ix_asp_net_user_roles_role_id");

                    b.ToTable("asp_net_user_roles");

                    b.HasDiscriminator().HasValue("AppUserRole");
                });

            modelBuilder.Entity("Blyzer.Domain.Entities.AppUserToken", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>");

                    b.ToTable("asp_net_user_tokens");

                    b.HasDiscriminator().HasValue("AppUserToken");
                });

            modelBuilder.Entity("Blyzer.Domain.Entities.AppUser", b =>
                {
                    b.HasOne("Blyzer.Domain.Entities.Country", "Country")
                        .WithMany("AppUsers")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("fk_app_users_countries_country_id");
                });

            modelBuilder.Entity("Blyzer.Domain.Entities.Ball", b =>
                {
                    b.HasOne("Blyzer.Domain.Entities.End")
                        .WithMany("Balls")
                        .HasForeignKey("EndId")
                        .HasConstraintName("fk_balls_ends_end_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Blyzer.Domain.Entities.Player")
                        .WithMany("Balls")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("fk_balls_players_player_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Blyzer.Domain.Entities.End", b =>
                {
                    b.HasOne("Blyzer.Domain.Entities.Match", "Match")
                        .WithMany("Ends")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("fk_ends_matches_match_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Blyzer.Domain.Entities.Match", b =>
                {
                    b.HasOne("Blyzer.Domain.Entities.AppUser")
                        .WithMany("Matches")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("fk_matches_app_users_app_user_id");

                    b.HasOne("Blyzer.Domain.Entities.Tournament")
                        .WithMany("Matches")
                        .HasForeignKey("TournamentId")
                        .HasConstraintName("fk_matches_tournaments_tournament_id");
                });

            modelBuilder.Entity("Blyzer.Domain.Entities.Tournament", b =>
                {
                    b.HasOne("Blyzer.Domain.Entities.AppUser")
                        .WithMany("Tournaments")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("fk_tournaments_app_users_app_user_id");

                    b.HasOne("Blyzer.Domain.Entities.TournamentType")
                        .WithMany("Tournaments")
                        .HasForeignKey("TournamentTypeId")
                        .HasConstraintName("fk_tournaments_tournament_types_tournament_type_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Blyzer.Domain.Entities.EndToPlayer", b =>
                {
                    b.HasOne("Blyzer.Domain.Entities.End", "End")
                        .WithMany("EndToPlayers")
                        .HasForeignKey("EndId")
                        .HasConstraintName("fk_link_to_player_ends_end_id");
                });

            modelBuilder.Entity("Blyzer.Domain.Entities.MatchToPlayer", b =>
                {
                    b.HasOne("Blyzer.Domain.Entities.Match", "Match")
                        .WithMany("MatchToPlayers")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("fk_link_to_player_matches_match_id");

                    b.HasOne("Blyzer.Domain.Entities.Player")
                        .WithMany("MatchToPlayers")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("fk_link_to_player_players_player_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Blyzer.Domain.Entities.AppRoleClaim", b =>
                {
                    b.HasOne("Blyzer.Domain.Entities.AppRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_asp_net_role_claims_app_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Blyzer.Domain.Entities.AppUserClaim", b =>
                {
                    b.HasOne("Blyzer.Domain.Entities.AppUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_claims_app_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Blyzer.Domain.Entities.AppUserLogin", b =>
                {
                    b.HasOne("Blyzer.Domain.Entities.AppUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_logins_app_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Blyzer.Domain.Entities.AppUserRole", b =>
                {
                    b.HasOne("Blyzer.Domain.Entities.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_asp_net_user_roles_app_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Blyzer.Domain.Entities.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_roles_app_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Blyzer.Domain.Entities.AppUserToken", b =>
                {
                    b.HasOne("Blyzer.Domain.Entities.AppUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_tokens_app_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
