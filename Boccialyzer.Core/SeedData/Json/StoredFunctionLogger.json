[
  {
    "proname": "athenalog_add_new_importer_event",
    "sql": "CREATE OR REPLACE FUNCTION public.athenalog_add_new_importer_event(id uuid, createdon timestamp without time zone, username text, ipaddress text, eventdate timestamp without time zone, eventlevel integer, message text, exception text, eventtype bigint, importerid uuid, selectiontype integer, selectionvalue text, textfilename text, infofilename text, detail text) RETURNS bigint LANGUAGE 'sql' COST 100 VOLATILE AS $BODY$ INSERT INTO public.\"LogImporterEvents\"(\"Id\", \"CreatedOn\", \"UserName\", \"IpAddress\", \"EventDate\", \"EventLevel\", \"Message\", \"Exception\", \"EventType\", \"ImporterId\", \"SelectionType\", \"SelectionValue\", \"TextFileName\", \"InfoFileName\", \"Detail\") VALUES (id, createdon, username, ipaddress, eventdate, eventlevel, message, exception, eventtype, importerid, selectiontype, selectionvalue, textfilename, infofilename, detail);SELECT COUNT(*) FROM public.\"LogImporterEvents\" WHERE \"Id\" = id; $BODY$; ALTER FUNCTION public.athenalog_add_new_importer_event(uuid, timestamp without time zone, text, ipaddress text, timestamp without time zone, integer, text, text, bigint, uuid, integer, text, text, text, text) OWNER TO postgres; COMMENT ON FUNCTION public.athenalog_add_new_importer_event(uuid, timestamp without time zone, text, ipaddress text, timestamp without time zone, integer, text, text, bigint, uuid, integer, text, text, text, text) IS 'Додати новий запис лога импортера';"
  },
  {
    "proname": "athenalog_add_new_initiator_event",
    "sql": "CREATE OR REPLACE FUNCTION public.athenalog_add_new_initiator_event(id uuid, createdon timestamp without time zone, username text, ipaddress text, eventdate timestamp without time zone, eventtype integer, eventlevel integer, message text, exception text, sessionid uuid, issueid uuid) RETURNS bigint LANGUAGE 'sql' COST 100 VOLATILE AS $BODY$ INSERT INTO public.\"LogInitiatorEvents\"(\"Id\", \"CreatedOn\", \"UserName\", \"IpAddress\", \"EventDate\", \"EventType\", \"EventLevel\", \"Message\", \"Exception\", \"SessionId\", \"IssueId\") VALUES (id, createdon, username, ipaddress, eventdate, eventtype, eventlevel, message, exception, sessionid, issueid );SELECT COUNT(*) FROM public.\"LogInitiatorEvents\" WHERE \"Id\" = id; $BODY$; ALTER FUNCTION public.athenalog_add_new_initiator_event(uuid, timestamp without time zone, text, text, timestamp without time zone, integer, integer, text, text, uuid, uuid) OWNER TO postgres; COMMENT ON FUNCTION public.athenalog_add_new_initiator_event(uuid, timestamp without time zone, text, text, timestamp without time zone, integer, integer, text, text, uuid, uuid) IS 'Додати новий запис по ініціатору';"
  },
  {
    "proname": "athenalog_add_new_db_event",
    "sql": "CREATE OR REPLACE FUNCTION public.athenalog_add_new_db_event(id uuid, createdon timestamp without time zone, username text, ipaddress text, eventdate timestamp without time zone, evettype integer, eventlevel integer, message text, exception text, tablename text, keyvalue text, oldvalues text, newvalues text, operationtype integer, operationresult integer) RETURNS bigint LANGUAGE 'sql'  COST 100 VOLATILE AS $BODY$INSERT INTO public.\"LogDbEvent\"(\"Id\", \"CreatedOn\", \"UserName\", \"IpAddress\", \"EventDate\", \"EventType\", \"EventLevel\", \"Message\", \"Exception\", \"TableName\", \"KeyValues\", \"OldValues\", \"NewValues\", \"OperationType\", \"OperationResult\") VALUES (id, createdon, username, ipaddress, eventdate, evettype, eventlevel, message, exception, tablename, keyvalue, oldvalues, newvalues, operationtype, operationresult); SELECT COUNT(*) FROM public.\"LogDbEvent\" WHERE \"Id\" = id;$BODY$;  ALTER FUNCTION public.athenalog_add_new_db_event(uuid, timestamp without time zone, text, text, timestamp without time zone, integer, integer, text, text, text, text, text, text, integer, integer) OWNER TO postgres;  COMMENT ON FUNCTION public.athenalog_add_new_db_event(uuid, timestamp without time zone, text, text, timestamp without time zone, integer, integer, text, text, text, text, text, text, integer, integer) IS 'Додати нове сповіщення за операціями з БД';"
  },
  {
    "proname": "athenalog_add_new_stream_event",
    "sql": "CREATE OR REPLACE FUNCTION public.athenalog_add_new_stream_event(id uuid, createdon timestamp without time zone, username text, ipaddress text, eventdate timestamp without time zone, eventtype integer, eventlevel integer, message text, exception text, filename text, issuenumber text, issueid uuid, sessionid uuid, operationresult integer) RETURNS bigint LANGUAGE 'sql' COST 100 VOLATILE AS $BODY$INSERT INTO public.\"LogStreamEvents\"(\"Id\", \"CreatedOn\", \"UserName\", \"IpAddress\", \"EventDate\", \"EventLevel\", \"Message\", \"Exception\", \"EventType\", \"FileName\", \"IssueNumber\", \"IssueId\", \"SessionId\", \"OperationResult\") VALUES (id, createdon, username, ipaddress, eventdate, eventlevel, message, exception, eventtype, filename, issuenumber, issueid, sessionid, operationresult); SELECT COUNT(*) FROM public.\"LogStreamEvents\" WHERE \"Id\" = id;$BODY$; ALTER FUNCTION public.athenalog_add_new_stream_event(uuid, timestamp without time zone, text, text, timestamp without time zone, integer, integer, text, text, text, text, uuid, uuid, integer) OWNER TO postgres; COMMENT ON FUNCTION public.athenalog_add_new_stream_event(uuid, timestamp without time zone, text, text, timestamp without time zone, integer, integer, text, text, text, text, uuid, uuid, integer) IS 'Додати нове сповіщення стрім-сервісу';"
  }
]
